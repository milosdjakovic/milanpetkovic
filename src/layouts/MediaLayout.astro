---
/* 
  TODO: 
  Make video accessible through URL query parameters.
  When the page is loaded and there is no query parameter for 'video', load the first video.
  If the query param exists, load the corresponding video.
  On click, query param should be set as well.
*/
import type { Language } from "../bin/types";

interface VideoData {
  title: {
    rs: string;
    en: string;
  };
  url: string;
}
export interface Props {
  videoData: VideoData[];
  language: Language;
  youtubeLinkLabel: string;
}

const { videoData, language, youtubeLinkLabel } = Astro.props;
---

<!-- Video section -->
<div>
  <h1 id="video-title" class="text-2xl">{videoData[0].title[language]}</h1>

  <!-- Video -->
  <div
    class="relative mt-4"
    style="width: 100%; height: 0; padding-bottom: 56.25%;"
  >
    <iframe
      id="video-player"
      width="560"
      height="315"
      class="absolute top-0 left-0 w-full h-full"
      src={videoData[0].url}
      frameborder="0"
      allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen></iframe>
  </div>
</div>

<!-- Playlist -->
<ul class="mt-4 mb-12">
  {
    videoData.map((video, i) => (
      <li>
        <button
          class={`video-button ${
            i === 0 ? "text-fluo-green font-semibold" : ""
          } flex flex-row-reverse py-2 xl:flex-row sm:py-0 sm:my-2 focus:outline-none text-gray-300 hover:text-white hover:shadow-bottom-fluo`}
          data-video-title={video.title[language]}
          data-video-url={video.url}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="xl:-ml-8 xl:mr-2 icon icon-tabler icon-tabler-volume"
            width="24"
            height="24"
            stroke-width="2"
            stroke="currentColor"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M0 0h24v24H0z" stroke="none" />
            <path d="M15 8a5 5 0 010 8M17.7 5a9 9 0 010 14M6 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h2l3.5-4.5A.8.8 0 0111 5v14a.8.8 0 01-1.5.5L6 15" />
          </svg>

          <span class="mr-2 xl:mr-0">{video.title[language]}</span>
        </button>
      </li>
    ))
  }
</ul>

<!-- Official Youtube Channel Link -->
<a
  class="flex items-center link"
  href="https://www.youtube.com/user/MilanPetkovicTrio/videos"
  target="_blank"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="w-6 mr-1 icon icon-tabler icon-tabler-brand-youtube"
    viewBox="0 0 24 24"
    stroke-width="1.3"
    stroke="currentColor"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <rect x="3" y="5" width="18" height="14" rx="4"></rect>
    <path d="M10 9l5 3l-5 3z"></path>
  </svg>

  {youtubeLinkLabel}
</a>

<script>
  const videoTitle: HTMLHeadElement = document.querySelector("#video-title")!;
  const videoPlayer: HTMLIFrameElement =
    document.querySelector("#video-player")!;
  const videoButtons: NodeListOf<HTMLButtonElement> =
    document.querySelectorAll(".video-button")!;

  const latestVideoTitle = videoButtons[0].dataset.videoTitle ?? "";
  const latestVideoUrl = videoButtons[0].dataset.videoUrl ?? "";

  function setVideoTitleAsURLQueryParameter(
    videoTitle: string = latestVideoTitle
  ) {
    const url = new URL(window.location.href);
    url.searchParams.set("video", encodeURIComponent(videoTitle.toLowerCase()));
    window.history.replaceState(null, "", url);
  }

  function getQueryParams(param: string): string {
    const url: URL = new URL(window.location.href);
    const params: URLSearchParams = url.searchParams;
    const videoTitle: string = params.get(param) ?? "";

    return decodeURIComponent(videoTitle);
  }

  function getVideoDataBasedOnURLQueryParameter(): {
    title: string;
    url: string;
  } {
    const videoTitleFromQueryParameter = getQueryParams("video");

    let matchedVideoTitle = "";
    let matchedVideoUrl = "";

    videoButtons.forEach((videoButton) => {
      const videoTitle = videoButton.dataset.videoTitle?.toLowerCase();

      if (videoTitle !== videoTitleFromQueryParameter) return;

      matchedVideoTitle = videoButton.dataset.videoTitle ?? latestVideoTitle;
      matchedVideoUrl = videoButton.dataset.videoUrl ?? latestVideoUrl;
    });

    return {
      title: matchedVideoTitle,
      url: matchedVideoUrl,
    };
  }

  function resetPlaylistItemStyles() {
    videoButtons.forEach((videoButton) => {
      videoButton.classList.remove("text-fluo-green", "font-semibold");
    });
  }

  function selectVideo(title: string, url: string) {
    videoTitle.textContent = title;
    videoPlayer.src = url;

    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  videoButtons.forEach((videoButton) => {
    videoButton.addEventListener("click", () => {
      resetPlaylistItemStyles();
      videoButton.classList.add("text-fluo-green", "font-semibold");

      selectVideo(
        videoButton.dataset.videoTitle ?? "",
        videoButton.dataset.videoUrl ?? ""
      );

      setVideoTitleAsURLQueryParameter(videoButton.dataset.videoTitle ?? "");
    });
  });

  function initializeUrlQueryParameter() {
    const videoTitle: string = getQueryParams("video");
    if (videoTitle !== "") return;
    setVideoTitleAsURLQueryParameter(latestVideoTitle);
  }

  function setVideoDataBasedOnURLQueryParameters() {
    const { title, url } = getVideoDataBasedOnURLQueryParameter();
    selectVideo(title, url);
  }

  initializeUrlQueryParameter();
  setVideoDataBasedOnURLQueryParameters();
</script>
